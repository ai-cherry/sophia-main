version: '3.8'

services:
  # SOPHIA API Service
  sophia-api:
    build:
      context: .
      target: development
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    environment:
      - ENVIRONMENT=development
      - REDIS_URL=redis://redis:6379/0
      - POSTGRES_URL=postgresql://postgres:postgres@postgres:5432/sophia
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - PINECONE_API_KEY=${PINECONE_API_KEY}
      - PINECONE_ENVIRONMENT=${PINECONE_ENVIRONMENT:-us-east1-gcp}
      - WEAVIATE_URL=http://weaviate:8080
      - ESTUARY_API_URL=${ESTUARY_API_URL:-https://api.estuary.tech}
    depends_on:
      - postgres
      - redis
      - weaviate
    networks:
      - sophia-network
    restart: unless-stopped

  # SOPHIA Admin Frontend
  sophia-admin:
    build:
      context: ./sophia_admin_frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./sophia_admin_frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:8000
    depends_on:
      - sophia-api
    networks:
      - sophia-network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=sophia
    networks:
      - sophia-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache and Message Broker
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    networks:
      - sophia-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Weaviate Vector Database
  weaviate:
    image: semitechnologies/weaviate:1.19.6
    ports:
      - "8080:8080"
    volumes:
      - weaviate-data:/var/lib/weaviate
    environment:
      - QUERY_DEFAULTS_LIMIT=20
      - AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED=true
      - PERSISTENCE_DATA_PATH=/var/lib/weaviate
      - DEFAULT_VECTORIZER_MODULE=none
      - ENABLE_MODULES=text2vec-openai
      - OPENAI_APIKEY=${OPENAI_API_KEY}
    networks:
      - sophia-network
    restart: unless-stopped

  # MCP Server
  mcp-server:
    build:
      context: .
      target: development
    command: python -m backend.mcp.server
    ports:
      - "8002:8002"
    volumes:
      - .:/app
    environment:
      - ENVIRONMENT=development
      - REDIS_URL=redis://redis:6379/0
      - POSTGRES_URL=postgresql://postgres:postgres@postgres:5432/sophia
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - MCP_SERVER_PORT=8002
    depends_on:
      - postgres
      - redis
    networks:
      - sophia-network
    restart: unless-stopped

  # Estuary Flow Connector (if running locally)
  estuary-connector:
    image: ghcr.io/estuary/flow:latest
    ports:
      - "8003:8080"
    volumes:
      - estuary-data:/data
    environment:
      - ESTUARY_API_KEY=${ESTUARY_API_KEY}
    networks:
      - sophia-network
    restart: unless-stopped
    profiles:
      - local-estuary

  # Monitoring: Prometheus
  prometheus:
    image: prom/prometheus:v2.45.0
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - sophia-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Monitoring: Grafana
  grafana:
    image: grafana/grafana:10.0.3
    ports:
      - "3001:3000"
    volumes:
      - ./infrastructure/monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./infrastructure/monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=sophia_admin
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    networks:
      - sophia-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/conf.d:/etc/nginx/conf.d
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - sophia-api
      - sophia-admin
    networks:
      - sophia-network
    restart: unless-stopped
    profiles:
      - production

  # Base service definition for MCP servers to avoid repetition
  x-base-mcp-service: &base-mcp-service
    build:
      context: .
      dockerfile: Dockerfile.mcp
    volumes:
      - .:/app
    environment:
      - PYTHONUNBUFFERED=1
      - PULUMI_ORG=${PULUMI_ORG}
      - PINECONE_API_KEY=${PINECONE_API_KEY}
      - HUGGING_FACE_API_KEY=${HUGGING_FACE_API_KEY}
      # Add any other required env vars for secrets here
    networks:
      - sophia-network
    restart: unless-stopped

  # --- Individual MCP Servers ---
  gong-mcp:
    <<: *base-mcp-service
    container_name: sophia-gong-mcp
    command: ["python3", "-m", "backend.mcp.gong_mcp_server"]

  claude-mcp:
    <<: *base-mcp-service
    container_name: sophia-claude-mcp
    command: ["python3", "-m", "backend.mcp.claude_mcp_server"]

  lambda-labs-mcp:
    <<: *base-mcp-service
    container_name: sophia-lambda-labs-mcp
    command: ["python3", "-m", "backend.mcp.lambda_labs_mcp_server"]

  linear-mcp:
    <<: *base-mcp-service
    container_name: sophia-linear-mcp
    command: ["python3", "-m", "backend.mcp.linear_mcp_server"]

  slack-mcp:
    <<: *base-mcp-service
    container_name: sophia-slack-mcp
    command: ["python3", "-m", "backend.mcp.slack_mcp_server"]

  knowledge-mcp:
    <<: *base-mcp-service
    container_name: sophia-knowledge-mcp
    command: ["python3", "-m", "backend.mcp.knowledge_mcp_server"]

  codebase-awareness-mcp:
    <<: *base-mcp-service
    container_name: sophia-codebase-awareness-mcp
    command: ["python3", "-m", "backend.mcp.codebase_awareness_mcp_server"]

networks:
  sophia-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  weaviate-data:
  prometheus-data:
  grafana-data:
  estuary-data:
