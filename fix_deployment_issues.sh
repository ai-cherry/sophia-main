#!/bin/bash
# Fix common Sophia AI deployment issues
# This script automatically fixes common deployment issues

echo "🔧 Fixing Sophia AI deployment issues..."

# Set environment variables
export DEPLOY_ENV="production"
export DEPLOY_TARGET="lambda-labs"
export DEPLOY_REGION="us-west-2"

# Step 1: Set up SSH connection to production server
echo "🔑 Setting up SSH connection to production server..."
SSH_KEY="~/.ssh/lambda_labs_key"
PROD_SERVER="sophia-prod.payready.ai"
PROD_USER="deploy"

# Check if we can connect to the server
echo "🔌 Checking SSH connection..."
if ssh -i $SSH_KEY -o ConnectTimeout=5 $PROD_USER@$PROD_SERVER "echo 'Connection successful'"; then
  echo "✅ SSH connection successful"
else
  echo "❌ SSH connection failed. Please check:"
  echo "  - SSH key exists at $SSH_KEY"
  echo "  - Server $PROD_SERVER is reachable"
  echo "  - User $PROD_USER has access to the server"
  echo "  - Firewall allows SSH connections"
  exit 1
fi

# Step 2: Fix environment variables
echo "🔧 Fixing environment variables..."
ssh -i $SSH_KEY $PROD_USER@$PROD_SERVER "cd /opt/sophia && cp .env .env.backup"

# Load secrets from local .env file
if [ -f ".env" ]; then
  echo "📥 Loading secrets from local .env file..."
  source .env
else
  echo "⚠️ No local .env file found. Using placeholder values."
  # Set placeholder values
  ANTHROPIC_API_KEY="PLACEHOLDER_ANTHROPIC_API_KEY"
  PULUMI_ACCESS_TOKEN="PLACEHOLDER_PULUMI_ACCESS_TOKEN"
  SLACK_BOT_TOKEN="PLACEHOLDER_SLACK_BOT_TOKEN"
  SLACK_APP_TOKEN="PLACEHOLDER_SLACK_APP_TOKEN"
  SLACK_SIGNING_SECRET="PLACEHOLDER_SLACK_SIGNING_SECRET"
  SLACK_CLIENT_ID="PLACEHOLDER_SLACK_CLIENT_ID"
  SLACK_CLIENT_SECRET="PLACEHOLDER_SLACK_CLIENT_SECRET"
  SLACK_REFRESH_TOKEN="PLACEHOLDER_SLACK_REFRESH_TOKEN"
fi

ssh -i $SSH_KEY $PROD_USER@$PROD_SERVER "cd /opt/sophia && cat > .env << EOF
# Sophia AI Environment Variables
# Auto-generated by fix_deployment_issues.sh

# API Keys
ANTHROPIC_API_KEY=\${ANTHROPIC_API_KEY}
PULUMI_ACCESS_TOKEN=\${PULUMI_ACCESS_TOKEN}

# Slack Integration
SLACK_BOT_TOKEN=\${SLACK_BOT_TOKEN}
SLACK_APP_TOKEN=\${SLACK_APP_TOKEN}
SLACK_SIGNING_SECRET=\${SLACK_SIGNING_SECRET}
SLACK_CLIENT_ID=\${SLACK_CLIENT_ID}
SLACK_CLIENT_SECRET=\${SLACK_CLIENT_SECRET}
SLACK_REFRESH_TOKEN=\${SLACK_REFRESH_TOKEN}

# Linear Integration (placeholder)
LINEAR_API_TOKEN=lin_api_placeholder
LINEAR_WORKSPACE_ID=lin_workspace_placeholder

# Gong Integration (placeholder)
GONG_CLIENT_ID=gong_client_placeholder
GONG_CLIENT_SECRET=gong_secret_placeholder

# Database Configuration
DATABASE_URL=postgresql://sophia:sophia_password@localhost:5432/sophia
REDIS_URL=redis://localhost:6379/0

# Vector Database Configuration
PINECONE_API_KEY=pinecone_api_placeholder
PINECONE_ENVIRONMENT=us-west1-gcp
WEAVIATE_URL=http://localhost:8080
WEAVIATE_API_KEY=weaviate_api_placeholder

# Server Configuration
PORT=8000
NODE_ENV=production
LOG_LEVEL=info
EOF"
echo "✅ Environment variables fixed"

# Step 3: Fix Docker Compose configuration
echo "🐳 Fixing Docker Compose configuration..."
ssh -i $SSH_KEY $PROD_USER@$PROD_SERVER "cd /opt/sophia && cp docker-compose.mcp.yml docker-compose.mcp.yml.backup"
ssh -i $SSH_KEY $PROD_USER@$PROD_SERVER "cd /opt/sophia && sed -i 's/volumes:\\s*slack:\\s*depends_on:/volumes:\\n    slack:\\n  depends_on:/g' docker-compose.mcp.yml"
echo "✅ Docker Compose configuration fixed"

# Step 4: Fix Python package dependencies
echo "📦 Fixing Python package dependencies..."
ssh -i $SSH_KEY $PROD_USER@$PROD_SERVER "cd /opt/sophia && ./fix_dependencies.py"
echo "✅ Python package dependencies fixed"

# Step 5: Fix SSL certificates
echo "🔒 Fixing SSL certificates..."
ssh -i $SSH_KEY $PROD_USER@$PROD_SERVER "cd /opt/sophia && ./fix_ssl_certificates.py"
echo "✅ SSL certificates fixed"

# Step 6: Restart Docker containers
echo "🔄 Restarting Docker containers..."
ssh -i $SSH_KEY $PROD_USER@$PROD_SERVER "cd /opt/sophia && docker-compose -f docker-compose.mcp.yml down"
ssh -i $SSH_KEY $PROD_USER@$PROD_SERVER "cd /opt/sophia && docker-compose -f docker-compose.mcp.yml up -d"
echo "✅ Docker containers restarted"

# Step 7: Restart Nginx
echo "🌐 Restarting Nginx..."
ssh -i $SSH_KEY $PROD_USER@$PROD_SERVER "sudo systemctl restart nginx"
echo "✅ Nginx restarted"

# Step 8: Restart Sophia service
echo "⚙️ Restarting Sophia service..."
ssh -i $SSH_KEY $PROD_USER@$PROD_SERVER "sudo systemctl restart sophia"
echo "✅ Sophia service restarted"

# Step 9: Run health check
echo "🩺 Running health check..."
ssh -i $SSH_KEY $PROD_USER@$PROD_SERVER "cd /opt/sophia && ./run_with_ssl_fix.py automated_health_check.py"
echo "✅ Health check complete"

echo "✅ Deployment issues fixed!"
echo "Please run ./diagnose_deployment.sh to verify that all issues have been resolved."
