name: Rotate Integration Secrets

on:
  schedule:
    - cron: '0 0 1 * *'  # Run monthly on the 1st at midnight UTC
  workflow_dispatch:  # Allow manual triggering
    inputs:
      integration:
        description: 'Integration to rotate secrets for (all, snowflake, gong, vercel, estuary)'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - snowflake
          - gong
          - vercel
          - estuary

jobs:
  rotate-secrets:
    name: Rotate Integration Secrets
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r integration_requirements.txt
      
      - name: Set up environment variables
        run: |
          echo "Setting up environment variables..."
          cp integration.env.example .env
          
          # Snowflake
          echo "SNOWFLAKE_ACCOUNT=${{ secrets.SNOWFLAKE_ACCOUNT }}" >> .env
          echo "SNOWFLAKE_USER=${{ secrets.SNOWFLAKE_USER }}" >> .env
          echo "SNOWFLAKE_PASSWORD=${{ secrets.SNOWFLAKE_PASSWORD }}" >> .env
          echo "SNOWFLAKE_WAREHOUSE=${{ secrets.SNOWFLAKE_WAREHOUSE }}" >> .env
          echo "SNOWFLAKE_DATABASE=${{ secrets.SNOWFLAKE_DATABASE }}" >> .env
          echo "SNOWFLAKE_SCHEMA=${{ secrets.SNOWFLAKE_SCHEMA }}" >> .env
          echo "SNOWFLAKE_ROLE=${{ secrets.SNOWFLAKE_ROLE }}" >> .env
          
          # Gong
          echo "GONG_API_KEY=${{ secrets.GONG_API_KEY }}" >> .env
          echo "GONG_API_SECRET=${{ secrets.GONG_API_SECRET }}" >> .env
          
          # Vercel
          echo "VERCEL_API_TOKEN=${{ secrets.VERCEL_API_TOKEN }}" >> .env
          echo "VERCEL_TEAM_ID=${{ secrets.VERCEL_TEAM_ID }}" >> .env
          echo "VERCEL_PROJECT_ID=${{ secrets.VERCEL_PROJECT_ID }}" >> .env
          
          # Estuary
          echo "ESTUARY_API_KEY=${{ secrets.ESTUARY_API_KEY }}" >> .env
          echo "ESTUARY_API_URL=${{ secrets.ESTUARY_API_URL }}" >> .env
      
      - name: Determine integrations to rotate
        id: determine-integrations
        run: |
          INTEGRATION="${{ github.event.inputs.integration || 'all' }}"
          echo "INTEGRATION=$INTEGRATION" >> $GITHUB_ENV
          
          if [ "$INTEGRATION" = "all" ]; then
            INTEGRATIONS="snowflake gong vercel estuary"
          else
            INTEGRATIONS="$INTEGRATION"
          fi
          
          echo "INTEGRATIONS=$INTEGRATIONS" >> $GITHUB_ENV
          echo "Rotating secrets for: $INTEGRATIONS"
      
      - name: Rotate Snowflake secrets
        if: contains(env.INTEGRATIONS, 'snowflake')
        run: |
          echo "Rotating Snowflake secrets..."
          echo "Note: Snowflake password rotation requires manual intervention."
          echo "Please update the Snowflake password in the GitHub Secrets."
      
      - name: Rotate Gong secrets
        if: contains(env.INTEGRATIONS, 'gong')
        run: |
          echo "Rotating Gong secrets..."
          echo "Note: Gong API key rotation requires manual intervention."
          echo "Please generate a new API key in the Gong dashboard and update it in the GitHub Secrets."
      
      - name: Rotate Vercel secrets
        if: contains(env.INTEGRATIONS, 'vercel')
        run: |
          echo "Rotating Vercel secrets..."
          echo "Note: Vercel API token rotation requires manual intervention."
          echo "Please generate a new API token in the Vercel dashboard and update it in the GitHub Secrets."
      
      - name: Rotate Estuary secrets
        if: contains(env.INTEGRATIONS, 'estuary')
        run: |
          echo "Rotating Estuary secrets..."
          echo "Note: Estuary API key rotation requires manual intervention."
          echo "Please generate a new API key in the Estuary dashboard and update it in the GitHub Secrets."
      
      - name: Test integrations after rotation
        run: |
          echo "Testing integrations after rotation..."
          python unified_integration_test.py --tests $INTEGRATIONS --output rotation_test_results.json
      
      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: rotation-test-results
          path: rotation_test_results.json
      
      - name: Create rotation report
        run: |
          echo "Creating rotation report..."
          
          echo "# Secret Rotation Report - $(date +"%Y-%m-%d")" > rotation_report.md
          echo "" >> rotation_report.md
          echo "## Integrations Rotated" >> rotation_report.md
          
          for integration in $INTEGRATIONS; do
            echo "- $integration" >> rotation_report.md
          done
          
          echo "" >> rotation_report.md
          echo "## Test Results" >> rotation_report.md
          
          if [ -f rotation_test_results.json ]; then
            OVERALL_STATUS=$(jq -r '.status' rotation_test_results.json)
            echo "Overall Status: $OVERALL_STATUS" >> rotation_report.md
            
            echo "" >> rotation_report.md
            echo "### Details" >> rotation_report.md
            
            for integration in $INTEGRATIONS; do
              INTEGRATION_STATUS=$(jq -r ".tests[] | select(.name == \"$integration\") | .status" rotation_test_results.json)
              echo "- $integration: $INTEGRATION_STATUS" >> rotation_report.md
            done
          else
            echo "No test results available." >> rotation_report.md
          fi
      
      - name: Upload rotation report
        uses: actions/upload-artifact@v3
        with:
          name: rotation-report
          path: rotation_report.md
      
      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            const { repo, owner } = context.repo;
            const run_id = context.runId;
            const run_url = `https://github.com/${owner}/${repo}/actions/runs/${run_id}`;
            
            github.rest.issues.create({
              owner,
              repo,
              title: `⚠️ Secret Rotation Failed - ${new Date().toISOString().split('T')[0]}`,
              body: `Secret rotation failed in workflow run: [${run_id}](${run_url}).\n\nPlease check the logs for more details.`,
              labels: ['bug', 'secret-rotation-failure']
            });
