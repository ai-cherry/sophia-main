# .github/workflows/deploy_platform.yml
name: Deploy Sophia AI Platform to Lambda Labs

on:
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for triggering the deployment'
        required: true
        default: 'Manual deployment of the full platform stack.'

jobs:
  deploy:
    runs-on: ubuntu-latest

    permissions:
      id-token: write # Required for OIDC with cloud providers
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Setup Pulumi CLI
        uses: pulumi/actions@v5

      - name: Sync All Secrets from GitHub to Pulumi ESC
        run: python scripts/ci/sync_from_gh_to_pulumi.py
        env:
          # This special token is provided by GitHub Actions
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

          # This action will have access to all secrets in the GitHub organization
          # We list them here explicitly to pass them into the script's environment
          LAMBDA_API_KEY: ${{ secrets.LAMBDA_API_KEY }}
          LAMBDA_SSH_PRIVATE_KEY: ${{ secrets.LAMBDA_SSH_PRIVATE_KEY }}
          LAMBDA_SSH_KEY_NAME: ${{ secrets.LAMBDA_SSH_KEY_NAME }}
          AGNO_API_KEY: ${{ secrets.AGNO_API_KEY }}
          ARIZE_API_KEY: ${{ secrets.ARIZE_API_KEY }}
          ARIZE_SPACE_ID: ${{ secrets.ARIZE_SPACE_ID }}
          # ... and all 150+ other secrets ...

      - name: Deploy the Platform
        run: ./deploy_sophia_platform.sh
        env:
          # The deployment script itself doesn't need the secrets directly,
          # as the `pulumi` command will read them from the configured ESC environment.
          # However, we need to ensure Pulumi can authenticate.
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
